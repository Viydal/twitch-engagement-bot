import subprocess
import time
import whisper
from pydub import AudioSegment
import google.generativeai as genai
import random
import socket
import sys

# EDIT THESE
TWITCH_USER = ""  # STREAMER NAME YOU WANT TO USE BOT FOR

NICK = ""  # YOUR TWITCH BOT ACCOUNT
TOKEN = "" # YOUR TWITCH BOT OAUTH TOKEN (ACCESS TOKEN)
GOOGLE_API_KEY = "" # YOUR GOOGLE API KEY FOR THE GEMINI MODEL

PERSONALITY = "" # WHAT PERSONALITY SHOULD THE BOT TAKE

# DONT TOUCH THESE
CHANNEL = f"#{TWITCH_USER}"
TWITCH_URL = f"https://www.twitch.tv/{TWITCH_USER}"
STREAM_AUDIO_FILE = "streamAudio.mp3"
TRANSCRIPT_FILE = "transcript.txt"

HOST = "irc.chat.twitch.tv"
PORT = 6667

connection = socket.socket()
connection.connect((HOST, PORT))

connection.send(f"PASS {TOKEN}\r\n".encode())
connection.send(f"NICK {NICK}\r\n".encode())
connection.send(f"JOIN {CHANNEL}\r\n".encode())

model = genai.GenerativeModel('gemini-2.0-flash')
genai.configure(api_key=GOOGLE_API_KEY)


def recordClip(duration=17):
    print("recording audio from stream")
    streamlink_cmd = [
        sys.executable, "-m", "streamlink", "--twitch-disable-ads", "--stdout", TWITCH_URL, "audio_only"
    ]
    ffmpeg_cmd = [
        "ffmpeg",
        "-y",
        "-i", "pipe:0",
        "-t", str(duration),
        "-acodec", "libmp3lame",
        STREAM_AUDIO_FILE
    ]

    with subprocess.Popen(streamlink_cmd, stdout=subprocess.PIPE) as stream_proc:
        subprocess.run(ffmpeg_cmd, stdin=stream_proc.stdout)


def transcribeAudio():
    print("transcribing...")
    model = whisper.load_model("base")
    result = model.transcribe(STREAM_AUDIO_FILE)
    with open(TRANSCRIPT_FILE, "w", errors="ignore") as transcript_file:
        transcript_file.write(result["text"])
        print(f"transcription complete, saved to {TRANSCRIPT_FILE}")


def prompt():
    with open(TRANSCRIPT_FILE, "r") as transcribed_text:
        transcription = transcribed_text.read()
    
    message_type = "React with one message to the stream moment. Keep it short and impactful."
    
    prompt_text = (
    f"Message Type:\n"
    f"{message_type}\n\n"
    f"Personality:\n"
    f"{PERSONALITY}\n\n"
    f"Transcript:\n"
    f"{transcription}\n\n"
    f"Respond as the personality above."
)

    print(prompt_text)
    response = model.generate_content(prompt_text)
    print(response.text.lower())
    return response.text.lower()


def validTranscription():
    with (open("transcript.txt", "r")) as transcript:
        content = transcript.read()
        words = content.split()
        wordCount = len(words)

    if (wordCount < 10):
        return False
    else:
        return True


while True:
    randomWait = random.randint(10, 30)
    time.sleep(randomWait)
    
    recordClip()
    transcribeAudio()

    if validTranscription():
        message = prompt()
        connection.send(f"PRIVMSG {CHANNEL} :{message}\r\n".encode())
